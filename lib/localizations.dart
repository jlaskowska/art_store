import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class AppLocalizations {
  static String get bottomNavigationBarMenuHome =>
      _getText('bottomNavigationBarMenuHome');

  static String get bottomNavigationBarMenuCart =>
      _getText('bottomNavigationBarMenuCart');

  static String get bottomNavigationBarMenuFavourite =>
      _getText('bottomNavigationBarMenuFavourite');

  static String get appBarHeadlineArt => _getText('appBarHeadlineArt');

  static String get appBarHeadlineStore => _getText('appBarHeadlineStore');

  static String get productDetailScreenAddToBasketButton =>
      _getText('productDetailScreenAddToBasketButton');

  static String get shoppingCartScreenEmptyCartText =>
      _getText('shoppingCartScreenEmptyCartText');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'bottomNavigationBarMenuHome': 'Home',
    'bottomNavigationBarMenuCart': 'Cart',
    'bottomNavigationBarMenuFavourite': 'Favourites',
    'appBarHeadlineArt': 'Art',
    'appBarHeadlineStore': 'Store',
    'productDetailScreenAddToBasketButton': 'Add to basket',
    'shoppingCartScreenEmptyCartText': 'Your cart is empty.',
  };

  static Map<String, String> _deValues = {
    'bottomNavigationBarMenuHome': 'Startseite',
    'bottomNavigationBarMenuCart': 'Warenkorb',
    'bottomNavigationBarMenuFavourite': 'Favourites',
    'appBarHeadlineArt': 'Art',
    'appBarHeadlineStore': 'Store',
    'productDetailScreenAddToBasketButton': 'Zu den Warenkorb hinzuf√ºgen',
    'shoppingCartScreenEmptyCartText': 'Dein Warenkorb ist leer.',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
    'de': _deValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('de'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
